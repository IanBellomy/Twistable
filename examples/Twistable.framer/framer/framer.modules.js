require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"Twistable":[function(require,module,exports){
var normalizeAngle, shortestDistanceBetweenAngles;

Layer.prototype.enableTwistable = function(range, constrained) {
  var handleSpinning, handleTouchEnd, handleTouchMove;
  this.canvasPinLocation = null;
  this.previousAngle = 0;
  this.angularVel = 0;
  this.twistRange = range || [0, 360];
  this.twistValue = 0;
  this.twistConstrained = constrained || range !== void 0;
  this.spinDecay = 0.95;
  handleTouchMove = (function(_this) {
    return function(e) {
      var angleDif, constrainedRotation, newAngle, newAngleDeg, newAngleDegUpIsZero;
      newAngle = Math.atan2(_this.canvasPinLocation.y - e.pageY, _this.canvasPinLocation.x - e.pageX);
      newAngleDeg = newAngle / Math.PI * 180;
      newAngleDegUpIsZero = newAngleDeg - 90;
      angleDif = shortestDistanceBetweenAngles(_this.previousAngle, newAngleDegUpIsZero);
      _this.rotation += angleDif;
      _this.angularVel = angleDif;
      if (_this.twistConstrained) {
        constrainedRotation = Math.min(Math.max(_this.rotation, _this.twistRange[0]), _this.twistRange[1]);
        if (_this.rotation !== constrainedRotation) {
          _this.angularVel = 0;
          _this.rotation = constrainedRotation;
        }
      }
      if (!_this.hasTwistBegan && _this.angularVel !== 0) {
        _this.hasTwistBegan = true;
        _this.emit("twistStart");
      }
      _this.previousAngle = newAngleDegUpIsZero;
      _this.twistValue = Utils.modulate(_this.rotation, _this.twistRange, [0, 1]);
      return _this.emit("twist");
    };
  })(this);
  handleSpinning = (function(_this) {
    return function(e) {
      var angularVel, constrainedRotation;
      _this.rotation += _this.angularVel;
      _this.angularVel *= _this.spinDecay;
      if (_this.twistConstrained) {
        constrainedRotation = Math.min(Math.max(_this.rotation, _this.twistRange[0]), _this.twistRange[1]);
        if (_this.rotation !== constrainedRotation) {
          _this.angularVel = 0;
          _this.rotation = constrainedRotation;
        }
      }
      _this.twistValue = Utils.modulate(_this.rotation, _this.twistRange, [0, 1]);
      _this.emit("spin");
      if (Math.abs(angularVel) < 0.1) {
        angularVel = 0;
        _this.emit("spinEnd");
        return Framer.Loop.off("update", handleSpinning);
      }
    };
  })(this);
  handleTouchEnd = (function(_this) {
    return function() {
      _this.isBeingTwisted = false;
      _this.emit("twistEnd");
      Events.wrap(document).removeEventListener("touchmove", handleTouchMove);
      Events.wrap(document).removeEventListener("touchend", handleTouchEnd);
      return Framer.Loop.on("update", handleSpinning);
    };
  })(this);
  this.onTouchStart((function(_this) {
    return function(e) {
      var localPinLocation, startAngle, startAngleDeg, startAngleDegUpIsZero;
      localPinLocation = {
        x: _this.width * _this.originX,
        y: _this.height * _this.originY
      };
      _this.canvasPinLocation = _this.convertPointToCanvas(localPinLocation);
      startAngle = Math.atan2(_this.canvasPinLocation.y - e.pageY, _this.canvasPinLocation.x - e.pageX);
      startAngleDeg = startAngle / Math.PI * 180;
      startAngleDegUpIsZero = startAngleDeg - 90;
      _this.previousAngle = startAngleDegUpIsZero;
      _this.rotationTouchPoint = {
        x: e.pageX,
        y: e.pageY
      };
      _this.hasTwistBegan = false;
      _this.isBeingTwisted = true;
      Events.wrap(document).addEventListener("touchmove", handleTouchMove);
      Events.wrap(document).addEventListener("touchend", handleTouchEnd);
      return Framer.Loop.off("update", handleSpinning);
    };
  })(this));
  return this.setTwistValue = (function(_this) {
    return function(v) {
      _this.twistValue = Math.max(Math.min(v, 1), 0);
      _this.rotation = Utils.modulate(v, [0, 1], _this.twistRange);
      return _this.emit("twist");
    };
  })(this);
};

Layer.prototype.disableTwistable = function() {
  return print("NOT WORKING YET");
};

Layer.prototype.onTwist = function(fn) {
  return this.on("twist", fn);
};

Layer.prototype.onTwistStart = function(fn) {
  return this.on("twistStart", fn);
};

Layer.prototype.onTwistEnd = function(fn) {
  return this.on("twistEnd", fn);
};

Layer.prototype.onSpin = function(fn) {
  return this.on("spin", fn);
};

Layer.prototype.onSpinEnd = function(fn) {
  return this.on("spinEnd", fn);
};

normalizeAngle = function(a) {
  return (a + 360 * 10000) % 360;
};

shortestDistanceBetweenAngles = function(a1, a2) {
  var a1Norm, a2Norm, r1;
  a1Norm = normalizeAngle(a1);
  a2Norm = normalizeAngle(a2);
  r1 = a2Norm - a1Norm;
  if (Math.abs(r1) > 180) {
    if (r1 > 0) {
      return r1 - 360;
    } else {
      return r1 + 360;
    }
  } else {
    return r1;
  }
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
